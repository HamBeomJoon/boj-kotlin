package week15import java.io.BufferedReaderimport java.io.InputStreamReaderimport kotlin.system.exitProcessfun main() {    val br = BufferedReader(InputStreamReader(System.`in`))    val (n, k) = br.readLine().split(" ").map { it.toInt() }    var cnt = 0    val arr = intArrayOf(0) + br.readLine().split(" ").map { it.toInt() }.toIntArray()    buildMinHeap(arr, n)    for (i in n downTo 2) {        //swap        val temp = arr[1]        arr[1] = arr[i]        arr[i] = temp        cnt++        if (cnt == k) {            println(arr.joinToString(" "))            exitProcess(0)        }        heapify(arr, 1, i - 1)    }    println(-1)}private fun buildMinHeap(arr: IntArray, n: Int) {    for (i in n / 2 downTo 1) {        heapify(arr, i, n)    }}// A[k]를 루트로 하는 트리를 최소 힙 성질을 만족하도록 수정한다.// A[k]의 두 자식을 루트로 하는 서브 트리는 최소 힙 성질을 만족하고 있다.// n은 배열 A의 전체 크기이며 최대 인덱스를 나타낸다.private fun heapify(arr: IntArray, k: Int, n: Int) {    val left = 2 * k    val right = 2 * k + 1    var min = -1    min = if (right <= n) {        if (arr[left] < arr[right]) left else right    } else if (left <= n) left    else return    // 최소 힙 성질을 만족하지 못하는 경우 재귀적으로 수정한다.    if (arr[min] < arr[k]) {        //swap        val temp = arr[k]        arr[k] = arr[min]        arr[min] = temp        heapify(arr, min, n)    }}