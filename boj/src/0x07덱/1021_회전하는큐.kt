package `0x07덱`import java.io.BufferedReaderimport java.io.InputStreamReaderimport kotlin.math.minfun main() {    val br = BufferedReader(InputStreamReader(System.`in`))    val (n, m) = br.readLine().split(" ").map { it.toInt() }    val dq = ArrayDeque<Int>()    val nums = br.readLine().split(" ").map { it.toInt() }    for (i in 1..n) {        dq.add(i)    }    var ans = 0    for (i in 0..<m) {        var moveRight = 0        while (dq.first() != nums[i]) {            dq.addLast(dq.removeFirst())            moveRight++        }        ans += min(moveRight, dq.size - moveRight)        dq.removeFirst()    }    println(ans)}// 나는 먼저 오른쪽으로 무조건 돌린다음, dq.size-moveRight(왼쪽rotate회수)와 moveRight를 비교해서// 작은 값을 더했는데, 정답코드들을 보니 그냥 dq.index()로 미리 위치를 찾고 거기서// min 값을 통해 왼쪽으로 돌릴지, 오른쪽으로 돌릴 지 정한다음 돌리는 것도 괜찮은 듯하다.